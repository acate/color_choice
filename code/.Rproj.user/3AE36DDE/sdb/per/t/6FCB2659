{
    "collab_server" : "",
    "contents" : "# color_survey_DRAFT.R\n# 2019-04-19 adc\n# Analyzes csv files submitted by students for color survey\n\n# This here script lives in .../color_survey/code/\n# csv files live in .../color_survey/submissions/\n\nlibrary(ggplot2)\nlibrary(colorspace)\nlibrary(RColorBrewer)\nlibrary(tm) # for word clouds\nlibrary(wordcloud)\n\n###################################\n# Set user flags to control script below\n# For plots, limit colors to rainbow colors\n#   plus a few other (1)\n# or to the complement (0)\nrainbowFlag <- 1;\n###################################\n\n# Directories\n\nplotDir <- \"../plots/\"\n\n# Create large list with one data frame per list item\ndataFiles <- lapply(Sys.glob(\"../submissions/*.csv\"), read.csv)\n\n\n# Number of individuals who completed survey\nnIDs <- length(dataFiles)\n\n# Loop through dataFiles\n# Goals are\n#   1) Add columns to data frames that might be missing some\n#   2) Add column with subject ID number\n#   3) Concatenate all df's into one big one\n\n# Define list of df columns that should be there after reading in csv files\ncsvCols <- c(\n  \"Name\",\n  \"H\",\n  \"S\",\n  \"B\",\n  \"Like.1.no.7.yes\",\n  \"Like.to.wear\",\n  \"Misery.1..Pleasure.7.\",\n  \"Sleepiness.1..Arousal.7.\",\n  \"Adjective.of.your.choice\",\n  \"Example.object\",\n  \"Letter\",\n  \"Numeral\",\n  \"Are.you.a.synesthete.\",\n  \"Gender\",\n  \"Are.you..colorblind..in.any.sense.of.the.word\"\n)\n\n\n# # HAND FIX one person's data frame after initial inspection using for loop below\n# # df in list position 40 has \"Name\" column named \"X\" instead\n# colnames(dataFiles[[40]]) <- csvCols\n\n\ndfCols <- c(\n  \"Name\",\n  \"H\",\n  \"S\",\n  \"B\",\n  \"Like\",\n  \"Wear\",\n  \"Pleasure\",\n  \"Arousal\",\n  \"Adjective\",\n  \"Example\",\n  \"Letter\",\n  \"Numeral\",\n  \"Synesthete\",\n  \"Gender\",\n  \"Colorblind\",\n  \"ID\"\n)\n\ndf <- data.frame(matrix(ncol = length(dfCols), nrow = 0))\ncolnames(df) <- dfCols\n\nfor (i in 1:nIDs) {\n\n  # Find any missing columsn\n  colDiff <- setdiff(csvCols,colnames(dataFiles[[i]]))\n\n  # Append missing columns; ASSUMES they are all at end\n  if (length(colDiff) > 0) {\n    for (j in length(colDiff)) {\n      dataFiles[[i]] <- cbind(dataFiles[[i]],NA)\n      colnames(dataFiles[[i]])[length(colnames(dataFiles[[i]]))] <- colDiff[j]\n    }\n  }\n\n  # Add id numbers; just use loop iteration number\n  dataFiles[[i]] <- cbind(dataFiles[[i]],i)\n\n  # Fix column names, include name for the new ID column\n  colnames(dataFiles[[i]]) <- dfCols\n\n  df <- rbind(df,dataFiles[[i]])\n\n}\n\n# Clean up data frame\n\n# get rid of uppercase chars\ndf$Name <- tolower(df$Name)\ndf$Adjective <- tolower(df$Adjective)\ndf$Example <- tolower(df$Example)\ndf$Synesthete <- tolower(df$Synesthete)\ndf$Gender <- tolower(df$Gender)\ndf$Colorblind <- tolower(df$Colorblind)\n\n# Change to factors\ndf$Name <- factor(df$Name)\ndf$Adjective <- factor(df$Adjective)\ndf$Example <- factor(df$Example)\ndf$Letter <- factor(df$Letter)\ndf$Numeral <- factor(df$Numeral)\ndf$Synesthete <- factor(df$Synesthete)\ndf$Gender <- factor(df$Gender)\ndf$Colorblind <- factor(df$Colorblind)\n\n# Fill in other rows per ID for these vars\n\nfor (i in 1:nIDs) {\n\n  thisResp <- df[df$ID == i,]$Synesthete[df[df$ID == i,]$Synesthete != \"\"]\n  df[df$ID == i,]$Synesthete <- thisResp[1] # Take only first if more than one\n\n  thisResp <- df[df$ID == i,]$Gender[df[df$ID == i,]$Gender != \"\"]\n  df[df$ID == i,]$Gender <- thisResp[1] # Take only first if more than one\n\n  thisResp <- df[df$ID == i,]$Colorblind[df[df$ID == i,]$Colorblind != \"\"]\n  df[df$ID == i,]$Colorblind <- thisResp[1] # Take only first if more than one\n\n}\n\n\n# Don't apply to entire df or numeric vars will get converted to factors for some reason\n\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\" \",\"_\",x)}))\ndf$Adjective <- as.factor(sapply(df$Adjective, function(x) {gsub(\" \",\"_\",x)}))\ndf$Example <- as.factor(sapply(df$Example, function(x) {gsub(\" \",\"_\",x)}))\n\n# Remove blank spaces (now underscores) at end of words\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"_$\",\"\",x)}))\ndf$Adjective <- as.factor(sapply(df$Adjective, function(x) {gsub(\"_$\",\"\",x)}))\ndf$Example <- as.factor(sapply(df$Example, function(x) {gsub(\"_$\",\"\",x)}))\n\n\ndf[grepl(\"\\\\[\", df$Name),] <- NA\ndf[grepl(\"\\\\*\", df$Name),] <- NA\ndf[grepl(\"^$\", df$Name),] <- NA\n\ndf <- droplevels(df)\n\n\n# Hand fix some color Names\n\n# Order should matter, but still get problems (see Kludge below)\n\n# For easier comparisons:\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"chicago_maroon\",\"maroon_chicago\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"hokie_orange_\",\"orange_hokie\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"hot_pink\",\"pink_hot\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"baby_pink\",\"pink_baby\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"baby_yellow\",\"yellow_baby\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"lime\",\"green_lime\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"lime_green\",\"green_lime\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"midnight_purple\",\"purple_midnight\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"mint\",\"green_mint\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"mint_green\",\"green_mint\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"mustard\",\"yellow_mustard\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"mustard_yellow\",\"yellow_mustard\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"navy\",\"blue_navy\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"navy_blue\",\"blue_navy\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"baby_blue\",\"blue_baby\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"pale_blue\",\"blue_pale\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"navy_blue\",\"blue_navy\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"royal_blue\",\"blue_royal\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"sea_foam_green\",\"green_seafoam\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"seafoam_green\",\"green_seafoam\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"tardis_blue\",\"blue_tardis\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"wierd_purple_\",\"purple_weird\",x)}))\n\n# Kludge to fix\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"yellow_yellow_mustard\",\"yellow_mustard\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"green_green_lime\",\"green_lime\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"green_green_mint\",\"green_mint\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"blue_blue_navy\",\"blue_navy\",x)}))\n\n# Correcting typos, etc.\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"fuschia\",\"fuchsia\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"fushia\",\"fuchsia\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"magneta\",\"magenta\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"baby_pink\",\"pink_baby\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"peach_\",\"peach\",x)}))\ndf$Name <- as.factor(sapply(df$Name, function(x) {gsub(\"turqoise\",\"turquoise\",x)}))\n\n\n#df <- df[df$Colorblind == \"no\",]\n\ndf <- df[!is.na(df$H),]\ndf <- df[!is.na(df$S),]\ndf <- df[!is.na(df$B),]\n\n# # Later, HSV and LUV produce NaNs for HSB coords (0,0,0)\n# df <- df[df$H + df$S + df$B != 0,]\n\n# White (0,0,1) and black (0,0,0) produce errors with HSV and LUV below\ndf <- df[df$Name != \"white\",]\ndf <- df[df$Name != \"black\",]\n\n# Data validation; somehow bad values for B got through\ndf <- df[df$H <= 360,]\ndf <- df[df$S <= 100,]\ndf <- df[df$B <= 100,]\n\nrainbowColors <- c(\"red\",\"orange\",\"yellow\",\"green\",\"blue\",\"indigo\",\"violet\",\"brown\",\"gray\")\n\n###############################################\n# LIMIT to ROYGBIV plus a few others\nif (rainbowFlag){\n  df <- df[df$Name %in% rainbowColors,]\n} else {\n# ... or the complement\ndf <- df[!(df$Name %in% rainbowColors),]\n}\n###############################################\n\n\ndf <- droplevels(df)\n\nattach(df)\n\n# Make copies of the HSV variables that are normalized to range 0,1\n# Some color coordinates require values in that range, or at least as they are implemented in R\n# Keep the original variables, too.\ndf$h <- H/360;\ndf$s <- S/100;\ndf$v <- B/100;\n\n\nattach(df)\n\n# Super kludgy code to convert HSV values to L*u*v coordinates:\n\nx <- HSV(cbind(H,s,v))\n\n# There seems to be a weird problem with the colorspace package's HSV object class\n# Other classes from this package (e.g. RGB ) can be converted to the LUV class,\n# but not HSV for some reason.\n#\n# Consider the following error:\n# > as(x,\"LUV\")\n# Error in cbind(L, if (missing(U)) NULL else U, if (missing(V)) NULL else V) :\n#   Ambiguous conversion\n#\n# So Anthony worked around this by converting HSV to RGB (which works) first.\n\ny <- as(as(x,\"RGB\"),\"LUV\")\n\n# Another problem: can't directly coerce LUV class to data frame:\n# > n <- as.data.frame(y)\n# Error in as.data.frame.default(y) :\n#   cannot coerce class \"structure(\"LUV\", package = \"colorspace\")\" to a data.frame\n#\n# So, first convert to matrix, then to data frame:\n\nm <- coords(y);\nmdf <- as.data.frame(m);\n\n# Calculate means for each category (color name)\nmeanColors <- rbind(tapply(m[,2],Name,mean,na.rm = TRUE),tapply(m[,3],Name,mean,na.rm = TRUE))\n\n#-----------------\n# Draw the plots\n#-----------------\n\n# String to add to plot file names to distinguish between rainbow color and complement versions\nif (rainbowFlag){\n  rainbowStr <- 'rainbow'\n} else {\n  rainbowStr <- 'non-rainbow'\n}\n\n# Theme to remove background\n# From: https://felixfan.github.io/ggplot2-remove-grid-background-margin/\nblankTheme <- theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n                    panel.background = element_blank(), axis.line = element_line(colour = \"black\"))\n\n\n# The second and third dimensions of the LUV color space are the ones related to hue and saturation.  The first is the lightness dimension, so leave that out here\ncp <- ggplot(mdf,aes(mdf[,2],mdf[,3],color=hsv(h,s,v),group=Name,label=Name))\n\n# For comparison, make plots where the colors are displayed not as the students chose them, but with a constant saturation or value level\ncpKSat <- ggplot(mdf,aes(mdf[,2],mdf[,3],color=hsv(h,1,v),group=Name,label=Name))\ncpKVal <- ggplot(mdf,aes(mdf[,2],mdf[,3],color=hsv(h,s,1),group=Name,label=Name))\n\n\n# Plot the colors as they appeared when students chose them:\nsvg(\n  paste0(plotDir,'LUV_as_chosen_',rainbowStr,'.svg')\n)\npCP <- cp + geom_point(size=8) + scale_color_identity(guide=\"none\") + coord_fixed() + labs(list(title = \"Colors as chosen\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCP)\ndev.off()\n\n# Plot the colors as they would appear if they all had the same SATURATION\nsvg(\n  paste0(plotDir,'LUV_kSat_',rainbowStr,'.svg')\n)\npCPkSat <- cpKSat + geom_point(size=8) + scale_color_identity(guide=\"none\") + coord_fixed() + labs(list(title = \"Colors constrained to have constant SATURATION\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPkSat)\ndev.off()\n\n# Plot the colors as they would appear if they all had the same VALUE\nsvg(\n  paste0(plotDir,'LUV_kVal_',rainbowStr,'.svg')\n)\npCPkVal <- cpKVal + geom_point(size=8) + scale_color_identity(guide=\"none\") + coord_fixed() + labs(list(title = \"Colors constrained to have constant VALUE\", x = \"L\", y = \"U\"))  + blankTheme\nprint(pCPkVal)\ndev.off()\n\n# # Version with 95% confidence ellipses\n# svg(\n#   paste0(plotDir,'LUV_as_chosen_ellipses_',rainbowStr,'.svg')\n# )\n# pCPellipses <- cp + geom_point(size=8) + scale_color_identity(guide=\"none\") + coord_fixed() + stat_ellipse()\n# print(pCPellipses)\n# dev.off()\n\n# Funny all-text versions:\n# cp + scale_color_identity(guide=\"none\") + coord_fixed() + stat_ellipse() + geom_text(fontface=\"bold\")\n# cp + scale_color_identity(guide=\"none\") + coord_fixed() + stat_ellipse() + geom_label(fill=hsv(h,s,v),color=\"gray\",size=3)\n\n# With linetype to distinguish ellipses, which also makes a legend\n# (AC couldn't figure out how to make line colors different easily)\n\nif (rainbowFlag){   # usually too few points for non-rainbow colors\nsvg(\n  paste0(plotDir,'LUV_as_chosen_ellipses_',rainbowStr,'.svg')\n)\npCPEllipses <- cp + geom_point(size=6) + scale_color_identity() + coord_fixed() + stat_ellipse(aes(linetype=Name)) + scale_linetype_manual(values=c(1,2,3,4,5,6,1,2,3)) + labs(list(title = \"Colors as chosen\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPEllipses)\ndev.off()\n}\n\nsvg(\n  paste0(plotDir,'LUV_Like_',rainbowStr,'.svg')\n)\npCPLike <- cp + geom_point(size=Like) + scale_color_identity() + coord_fixed() + labs(list(title = \"Rating: Like this color\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPLike)\ndev.off()\n\nsvg(\n  paste0(plotDir,'LUV_Wear_',rainbowStr,'.svg')\n)\npCPWear <- cp + geom_point(size=Wear) + scale_color_identity() + coord_fixed() + labs(list(title = \"Rating: Would wear this color\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPWear)\ndev.off()\n\n\n# Difference between Wear and Like ratings\n# Add integer to difference to avoid negative numbers, because difference score will determine symbol size in plots\ndf$WLDiff <- df$Wear - df$Like + 5\n\nattach(df)\n\nsvg(\n  paste0(plotDir,'LUV_WearLikeDiff_',rainbowStr,'.svg')\n)\npCPWLDiff <- cp + geom_point(size=WLDiff) + scale_color_identity() + coord_fixed() + labs(list(title = \"Difference between Wear and Like ratings - larger means more likely to wear\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPWLDiff)\ndev.off()\n\n# # Funny all-text versions:\n# # (UNCOMMENT these lines to activate the code)\n# #----\n# cp + scale_color_identity(guide=\"none\") + coord_fixed() + stat_ellipse() +\n# geom_text(fontface=\"bold\")\n\n\nsvg(\n  paste0(plotDir,'color_text_',rainbowStr,'.svg')\n)\npCPtext <- cp + scale_color_identity(guide=\"none\") + coord_fixed() + geom_text(fontface=\"bold\")  + labs(list(title = \"Additional colors as chosen and named by students\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPtext)\ndev.off()\n\n\nsvg(\n  paste0(plotDir,'LUV_text_',rainbowStr,'.svg')\n)\npCPtextBox <- cp + scale_color_identity(guide=\"none\") + coord_fixed() +\n  geom_label(fill=hsv(h,s,v),color=\"black\",size=3) + labs(list(title = \"Additional colors as chosen and named by students\", x = \"L\", y = \"U\")) + blankTheme\nprint(pCPtextBox)\ndev.off()\n\n# cp + scale_color_identity(guide=\"none\") +\n#   coord_fixed() +\n#   geom_label(fill=hsv(h,s,v),color=\"black\",size=3)\n\n\n\n\n\n\n\n\n##################\n# Halt script unless plotting rainbow colors\n\nif (rainbowFlag == FALSE){\n  stop()\n}\n\n##################\n\n\n\n\n\n#----------------------------\n# Histograms of HSV variables\n#----------------------------\n\nhueShift <- H;\n\n# Adjust as needed to avoid splitting points from same color to opposite ends of x-axis\n\nhueShift[hueShift > 320] <- hueShift[hueShift > 320] - 360;\n\ndf$hueShift <- hueShift;\n\nattach(df)\n\n\n# Plot histogram of HUE numbers\nsvg(\n  paste0(plotDir,'hist_hueShift_',rainbowStr,'.svg')\n)\nhistHueShift <- ggplot(df[Name!=\"indigo\",],aes(hueShift,group=Name,color=Name)) + geom_freqpoly(bins=36,size=1) + scale_color_identity() + labs(list(title = \"Histogram of hue angles\", x = \"Hue angle\", y = \"count\")) + blankTheme\nprint(histHueShift)\ndev.off()\n\n# Plot histogram of SATURATION numbers\nsvg(\n  paste0(plotDir,'hist_Sat_',rainbowStr,'.svg')\n)\nhistSat <- ggplot(df[Name!=\"indigo\",],aes(S,group=Name,color=Name)) + geom_freqpoly(bins=10,size=1) + scale_color_identity() + labs(list(title = \"Histogram of Saturation\", x = \"Saturation\", y = \"count\")) + blankTheme\nprint(histSat)\ndev.off()\n\n\n# Plot histogram of BRIGHTNESS numbers\nsvg(\n  paste0(plotDir,'hist_Bright_',rainbowStr,'.svg')\n)\nhist_Bright <- ggplot(df[Name!=\"indigo\",],aes(B,group=Name,color=Name)) + geom_freqpoly(bins=10,size=1) + scale_color_identity() + labs(list(title = \"Histogram of Brightness\", x = \"Brightness\", y = \"count\")) + blankTheme\nprint(hist_Bright)\ndev.off()\n\n\n# Scatterplots to visualize correlations between HSV variables\n\nsvg(\n  paste0(plotDir,'scatter_BrightSat_',rainbowStr,'.svg')\n)\nscatter_BrightSat <- ggplot(df[Name!=\"indigo\",],aes(B,S,group=Name,color=Name)) + geom_point() + scale_color_identity() + theme(aspect.ratio = 1) + stat_smooth(formula = y ~ x, method = \"lm\", se=FALSE,size=2) + labs(list(title = \"Correlations between Brightness and Saturation\", x = \"Brightness\", y = \"Saturation\")) + blankTheme\nprint(scatter_BrightSat)\ndev.off()\n\n\nsvg(\n  paste0(plotDir,'scatter_HueSat_',rainbowStr,'.svg')\n)\nscatter_HueSat <- ggplot(df[Name!=\"indigo\",],aes(hueShift,S,group=Name,color=Name)) + geom_point() + scale_color_identity() + theme(aspect.ratio = 1) + stat_smooth(formula = y ~ x, method = \"lm\", se=FALSE, size=2) + labs(list(title = \"Correlations between Hue and Saturation\", x = \"Hue angle\", y = \"Saturation\")) + blankTheme\nprint(scatter_HueSat)\ndev.off()\n\n\nggplot(df[Name!=\"indigo\",],aes(hueShift,B,group=Name,color=Name)) + geom_point() + scale_color_identity() + theme(aspect.ratio = 1) + stat_smooth(formula = y ~ x, method = \"lm\", se=FALSE)\n\n\n# # To examine consistency or correlation between Hue ratings for various colors within subjects\n#\n# dfBV <- as.data.frame(cbind(S[Name==\"blue\"],S[Name==\"violet\"]))\n# colnames(dfBV) <- c(\"BlueSat\",\"VioletSat\")\n# ggplot(dfBV,aes(BlueHue,VioletHue)) + geom_point() + coord_fixed() # + theme(aspect.ratio = 1) # + stat_smooth(formula = y ~ x, method = \"lm\")\n\n\n\n\n\n#----------------------------------------------------\n# ANOVAs\n#----------------------------------------------------\n\n# summary(aov(Like ~ Gender*Name + Error(ID), data=df))\n# summary(aov(Wear ~ Gender*Name + Error(ID), data=df))\n# summary(aov(Arousal ~ Gender*Name + Error(ID), data=df))\n# summary(aov(Pleasure ~ Gender*Name + Error(ID), data=df))\n\n#----------------------------------------------------\n# WORD CLOUDS\n#----------------------------------------------------\n\n# # Method 1\n#\n# wc <- count(df[df$Name == \"red\",],Adjective)\n#\n# wc <- count(df[df$Name == \"red\",],Adjective)\n# wordcloud(wc$Adjective,wc$n,colors=brewer.pal(8,\"Reds\"),min.freq = 1)\n#\n# wc <- count(df[df$Name == \"red\",],Example)\n# wordcloud(wc$Example,wc$n,colors=brewer.pal(8,\"Reds\"),min.freq = 1)\n\n# Method 2\n\nmakeWC <- function(dfFactorIn,stemFlag=0,minFlag=1,colorStr=NULL){\n  x <- Corpus(VectorSource(dfFactorIn))\n  x <- tm_map(x, removePunctuation)\n  if (stemFlag) {x <- tm_map(x, stemDocument)}\n  tdm <- TermDocumentMatrix(x)\n  m <- as.matrix(tdm)\n  tdmV <- sort(rowSums(m),decreasing = TRUE)\n  d <- data.frame(word = names(tdmV),freq=tdmV)\n  if (minFlag){\n    if (is.null(colorStr)) {wordcloud(d$word,d$freq,min.freq=1)} else {\n      wordcloud(d$word,d$freq,min.freq=1,colors=colorStr)\n    }\n  } else {\n    if (is.null(colorStr)) {wordcloud(d$word,d$freq)} else {\n      wordcloud(d$word,d$freq,colors=colorStr)\n    }\n  }\n}\n#\n# makeWC(df$Adjective)\n# makeWC(df$Example)\n\nif (rainbowFlag){\nfor (i in rainbowColors) {\n\n  if (i == \"indigo\") {\n\n    svg(paste0(plotDir,\"wordcloud_\",i,\"_adjective.svg\"))\n    makeWC(df[df$Name == i,]$Adjective,colorStr=\"blueviolet\")\n    dev.off()\n\n    svg(paste0(plotDir,\"wordcloud_\",i,\"_example.svg\"))\n    makeWC(df[df$Name == i,]$Example,colorStr=\"blueviolet\")\n    dev.off()\n\n  } else {\n\n    svg(paste0(plotDir,\"wordcloud_\",i,\"_adjective.svg\"))\n    makeWC(df[df$Name == i,]$Adjective,colorStr=i)\n    dev.off()\n\n    svg(paste0(plotDir,\"wordcloud_\",i,\"_example.svg\"))\n    makeWC(df[df$Name == i,]$Example,colorStr=i)\n    dev.off()\n\n  }\n}\n}\n\n# makeWC(df[!(df$Name %in% rainbowColors),]$Name,minFlag = 1)\n\n\n# for (i in rainbowColors) {\n#\n# wc <- count(df[df$Name == i,],Letter)\n# wc <- wc[wc$Letter != \"FALSE\",]\n# wc <- wc[!(is.na(wc$Letter)),]\n# wordcloud(wc$Letter,wc$n,color=i,min.freq = 1,rot.per = 0)\n#\n# }\n#\n# for (i in rainbowColors) {\n#\n#   wc <- count(df[df$Name == i,],Numeral)\n#   wc <- wc[wc$Numeral != \"FALSE\",]\n#   wc <- wc[!(is.na(wc$Numeral)),]\n#   wordcloud(wc$Numeral,wc$n,color=i,min.freq = 1,rot.per = 0)\n#\n# }\n#\n# for (i in rainbowColors) {\n#   if (i == \"indigo\") {\n#     makeWC(df[df$Name == i,]$Adjective,colorStr=\"blueviolet\",stemFlag = 1)\n#     makeWC(df[df$Name == i,]$Example,colorStr=\"blueviolet\", stemFlag = 1)\n#   } else {\n#     makeWC(df[df$Name == i,]$Adjective,colorStr=i,stemFlag = 1)\n#     makeWC(df[df$Name == i,]$Example,colorStr=i,stemFlag = 1)\n#   }\n# }\n",
    "created" : 1555640940762.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1798758387",
    "id" : "6FCB2659",
    "lastKnownWriteTime" : 1569098915,
    "last_content_update" : 1569098915691,
    "path" : "~/Google Drive/teaching/CogPsych/Cog_2019/in-class/ic02_color/code/color_survey.R",
    "project_path" : "color_survey.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}